{"ast":null,"code":"import withApollo from 'next-with-apollo';\nimport ApolloClient from 'apollo-boost';\nimport { endpoint, prodEndpoint } from '../config';\nimport { LOCAL_STATE_QUERY } from '../components/Header';\nexport function createClient(_ref) {\n  var headers = _ref.headers;\n  return new ApolloClient({\n    uri: process.env.NODE_ENV === 'development' ? endpoint : prodEndpoint,\n    request: function request(operation) {\n      operation.setContext({\n        fetchOptions: {\n          credentials: 'include'\n        },\n        headers: headers\n      });\n    },\n    // local data\n    clientState: {\n      resolvers: {\n        Mutation: {\n          toggleForm: function toggleForm(_, variables, _ref2) {\n            var cache = _ref2.cache;\n\n            //read value from cache\n            var _cache$readQuery = cache.readQuery({\n              query: LOCAL_STATE_QUERY\n            }),\n                showCreateForm = _cache$readQuery.showCreateForm; //make state value opposite and save to cache\n\n\n            var data = {\n              data: {\n                showCreateForm: !showCreateForm\n              }\n            };\n            cache.writeData(data);\n            return data;\n          },\n          setToDefault: function setToDefault(_, variables, _ref3) {\n            var cache = _ref3.cache;\n            var data = {\n              data: {\n                showCreateForm: false\n              }\n            };\n            cache.writeData(data);\n            return data;\n          }\n        }\n      },\n      defaults: {\n        showCreateForm: false\n      }\n    }\n  });\n}\nexport default withApollo(createClient);","map":{"version":3,"sources":["/home/marin/Desktop/invoicing-solutions/frontend/lib/withData.js"],"names":["withApollo","ApolloClient","endpoint","prodEndpoint","LOCAL_STATE_QUERY","createClient","headers","uri","process","env","NODE_ENV","request","operation","setContext","fetchOptions","credentials","clientState","resolvers","Mutation","toggleForm","_","variables","cache","readQuery","query","showCreateForm","data","writeData","setToDefault","defaults"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,WAAvC;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AAEA,OAAO,SAASC,YAAT,OAAmC;AAAA,MAAXC,OAAW,QAAXA,OAAW;AACxC,SAAO,IAAIL,YAAJ,CAAiB;AACtBM,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyCR,QAAzC,GAAoDC,YADnC;AAEtBQ,IAAAA,OAAO,EAAE,iBAAAC,SAAS,EAAI;AACpBA,MAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,QAAAA,YAAY,EAAE;AACZC,UAAAA,WAAW,EAAE;AADD,SADK;AAInBT,QAAAA,OAAO,EAAPA;AAJmB,OAArB;AAMD,KATqB;AAUtB;AACAU,IAAAA,WAAW,EAAE;AACXC,MAAAA,SAAS,EAAE;AACTC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,UADQ,sBACGC,CADH,EACMC,SADN,SAC4B;AAAA,gBAATC,KAAS,SAATA,KAAS;;AAClC;AADkC,mCAEPA,KAAK,CAACC,SAAN,CAAgB;AACzCC,cAAAA,KAAK,EAAEpB;AADkC,aAAhB,CAFO;AAAA,gBAE1BqB,cAF0B,oBAE1BA,cAF0B,EAKlC;;;AACA,gBAAMC,IAAI,GAAG;AACXA,cAAAA,IAAI,EAAE;AACJD,gBAAAA,cAAc,EAAE,CAACA;AADb;AADK,aAAb;AAKAH,YAAAA,KAAK,CAACK,SAAN,CAAgBD,IAAhB;AACA,mBAAOA,IAAP;AACD,WAdO;AAeRE,UAAAA,YAfQ,wBAeKR,CAfL,EAeQC,SAfR,SAe8B;AAAA,gBAATC,KAAS,SAATA,KAAS;AACpC,gBAAMI,IAAI,GAAG;AACXA,cAAAA,IAAI,EAAE;AACJD,gBAAAA,cAAc,EAAE;AADZ;AADK,aAAb;AAKAH,YAAAA,KAAK,CAACK,SAAN,CAAgBD,IAAhB;AACA,mBAAOA,IAAP;AACD;AAvBO;AADD,OADA;AA4BXG,MAAAA,QAAQ,EAAE;AACRJ,QAAAA,cAAc,EAAE;AADR;AA5BC;AAXS,GAAjB,CAAP;AA4CD;AAED,eAAezB,UAAU,CAACK,YAAD,CAAzB","sourcesContent":["import withApollo from 'next-with-apollo';\nimport ApolloClient from 'apollo-boost';\nimport { endpoint, prodEndpoint } from '../config';\nimport { LOCAL_STATE_QUERY } from '../components/Header';\n\nexport function createClient({ headers }) {\n  return new ApolloClient({\n    uri: process.env.NODE_ENV === 'development' ? endpoint : prodEndpoint,\n    request: operation => {\n      operation.setContext({\n        fetchOptions: {\n          credentials: 'include'\n        },\n        headers\n      });\n    },\n    // local data\n    clientState: {\n      resolvers: {\n        Mutation: {\n          toggleForm(_, variables, { cache }) {\n            //read value from cache\n            const { showCreateForm } = cache.readQuery({\n              query: LOCAL_STATE_QUERY\n            });\n            //make state value opposite and save to cache\n            const data = {\n              data: {\n                showCreateForm: !showCreateForm\n              }\n            };\n            cache.writeData(data);\n            return data;\n          },\n          setToDefault(_, variables, { cache }) {\n            const data = {\n              data: {\n                showCreateForm: false\n              }\n            };\n            cache.writeData(data);\n            return data;\n          }\n        }\n      },\n      defaults: {\n        showCreateForm: false\n      }\n    }\n  });\n}\n\nexport default withApollo(createClient);\n"]},"metadata":{},"sourceType":"module"}